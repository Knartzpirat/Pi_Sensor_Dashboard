generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationen
  refreshTokens  RefreshToken[]
  recoveryCodes  RecoveryCode[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // "Angemeldet bleiben" Flag
  persistent Boolean  @default(false)
  
  // Security
  ipAddress String?
  userAgent String?
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model RecoveryCode {
  id        String    @id @default(cuid())
  code      String    // Gehasht gespeichert (bcrypt)
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  
  // Beziehung zum User
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([used])
  @@map("recovery_codes")
}


model SetupStatus {
  id          String   @id @default(cuid())
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  version     String?

  @@map("setup_status")
}

// Label-Tabelle (wiederverwendbare Tags/Kategorien)
model Label {
  id        String       @id @default(cuid())
  name      String       @unique
  color     String?      // z.B. f√ºr UI-Farben: "#FF5733"
  createdAt DateTime     @default(now())
  
  testObjects TestObject[]
}

// Testobjekt-Tabelle
model TestObject {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Beziehungen
  labelId     String?
  label       Label?    @relation(fields: [labelId], references: [id], onDelete: SetNull)
  pictures    Picture[]
  
  @@index([labelId])
  @@index([createdAt])
}

// Bilder-Tabelle
model Picture {
  id            String     @id @default(cuid())
  filename      String
  originalName  String
  mimeType      String
  size          Int
  url           String     // Pfad oder URL zum Bild
  createdAt     DateTime   @default(now())
  
  // Beziehung zu TestObject
  testObjectId  String
  testObject    TestObject @relation(fields: [testObjectId], references: [id], onDelete: Cascade)
  
  @@index([testObjectId])
}